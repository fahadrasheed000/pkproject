//============Remove Public folder from url==================
//===========================================================
Step 1: Rename File
In first step it is very easy and you need to just rename file name. you have to rename server.php to index.php at your laravel root directory.
server.php
INTO
index.php
Step 2: Update .htaccess
first of all you have to copy .htaccess file and put it laravel root folder. You just copy .htaccess file from public folder and then update bellow code:
.htaccess
Options -MultiViews -Indexes

RewriteEngine On
# Handle Authorization Header
RewriteCond %{HTTP:Authorization} .
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
# Redirect Trailing Slashes If Not A Folder...
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_URI} (.+)/$
RewriteRule ^ %1 [L,R=301]
# Handle Front Controller...
RewriteCond %{REQUEST_URI} !(\.css|\.js|\.png|\.jpg|\.gif|robots\.txt)$ [NC]
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^ index.php [L]
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_URI} !^/public/
RewriteRule ^(css|js|images)/(.*)$ public/$1/$2 [L,NC]
//============================================================
//============RModels and Views and Controllers==============
//===========================================================
views in resources folder and extension should be .blade.php

Controllers in app/http/Controller

Models in app/       u can make folder of models if needed
//============================================================
//============Routes==============
//===========================================================
web.php
handling our aplication routes
we can its the backbone of our application
//============================================================
//============MAking controller==============
//===========================================================
command php artisan make:controller PagesController    //first letter should be capital

//=====calling function from router its best for rewite url
Route::get('/', 'PagesController@index');

//=================BLADE TEMPLATING===================
//===================================================
Main layout page where u will add all headers and footers
resources/layouts/app.blade.php

So in this file 
<html>
<head>
<title>{{$title}}</title>
</head>
<body>
@yield('content')
</body>


</html


So when you will call the other view like this
@extends('layouts.app')

@section('content')
<h1>Services Page<h1>
@endsection
//===========================================================
//=====using if and foreach you use in aprofessional way
//==========================================================
@if   

@endif
@foreach(#abc as $a)
<li>{{$a}}</li>
@endforeach
to print the value use {{ }} Like type script
//===============================================================
//=important commands to install npm and laravel ui and auth view
//===============================================================
RUN COMMAND
composer required laravel/ui  ----->to download bootstrap and basic ui in laravel
php artisan ui vue --auth
then it will ask to replace app.blade.php say yes it will create login and register functionality
run npm install && npm rn dev
to compile your assets

//========================================================
//========================MIRGRATION AND DATABASES========
//========================================================
Open the *env file
First create php artisan make:controller PostController   (POST CONTROLLER)
//if you want to create controller with cruds functions use below command
php artisan make:controller PostController --resource
//======create model with migration to push in the data base later
First create php artisan make:model Post -m   (POST Model)
//---check database folder name of post migration add schema which will create table in the database

 Schema::create('posts', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('title');
            $table->mediumText('description');
            $table->timestamps();
        });
	before migration open providers/AppServiceProviders

Add line one lop and second in boot function
use Illuminate\Support\Facades\Schema;
   Schema::defaultStringLength(191);
   NOW MIGRATE OUR TABLES
   php artisan migrate
 //==================================================================
//========DIRECTLY WORK WITH DB AND MODEL USE (TINKER)==============
//==================================================================== 
php artisan tinker
check entries in database
App\Post::count();

//==========
	Let suppose you make a model post so for tiker command first make a instance
	$post=new App\Post();
	$post->title="First Title";
	$post->description="First description";
	$post->save();
	it will create entry in database
//================================CHECKING ROUTER IST WHICH U ARE USING
php artisan route:list
Now use the routes of controller the function s which you already created


php artisan make:controller PostController --resource


Now check list again it will show all functions of post controller in the routes
php artisan route:list
//=====================================================================
//============================QUERIES==================================
//=====================================================================
//=====================To write queries in POst controller==========
first use App\Post;  incluse model in controller
to get all data
Post::all();
to get data by sorting order
Post::orderby('id','desc')->get();
To find value from database
Post::find($id)
if you want to use your own custom query 
simple include DB class like

use DB;

And then $post=DB::select("select * from posts order by id DESC");

Post data like this
//same like tinker
$post=new Post();
$post->title=$request->input('title');
$post->description=$request->input('description');
$post->save();
   		
//=======================================================================================
//=======================USING FORMS you can use laravel collective packages
//=====================================LARAVEL FORMS========================================

composer require laravelcollective/html
 you can form now using open close of form tag
 {!! Form::open(['url' => 'foo/bar']) !!}
    //
{!! Form::close() !!}

You can validate the form using
   $this->validate($request,[
'title'=>'required',
'description'=>'required',

   ]);
   
//================To show Error message in resources Views add folder inc
add message.blade.php

@if(count($errors)>0)
@foreach($errors->all() as $error)
<div class="alert alert-danger">
{{$error}}
</div>

@endforeach
@endif

@if(session('success'))
<div class="alert alert-success">
{{session('success')}}
</div>


@endif

@if(session('error'))
<div class="alert alert-danger">
{{session('error')}}
</div>


@endif

include this message file in the main layout
app.blade.php

after contaiiner
@include('inc.message')
//----POST data like this
//same like tinker
$post=new Post();
$post->title=$request->input('title');
$post->description=$request->input('description');
$post->save();
   return redirect('{{config("app.url")}}post')->with('success','Post created successfully');

//======================FOR EDIT Update
if you use resources then it creates automatically routes so you can call according to the routes define by LaravelCollective
Like php artisan route:list
will show list of Routes 
Now for edit url URL/id/edit

//==========================MAKE MIGRATION AND ROLLL BACK AND ROLL BACK STEPS
making table like
php artisan make:migration create_users_table --create=users

if your table stucture want to change roll back
php artisan migrate:rollback   ->return all migrations you can update migration file
php artisan migrate:rolllback --step 2 ->return last two migrations

you can update schema and run command
php artisan migrate:reset
//===================Make middle ware========================
php artisan make:middleware AdminMiddleware
step 2:write condition in function
Step3 :register this middle ware in kernal.php and route middleware section
step4:in Auth login controller you import facades/Auth
Step5:write condition in function redirect to and define condition
Step6:define middleware in routes with group option
Route::group(['middleware'=>['auth','admin']]function(){

});
auth is the Laravel auth and admin is the middleware name which we registered in kernal

//===================dYNAMIC DATATABLES==================
to install datatable plugin use command
composer require yajra/laravel-datatables-oracle
after that define this in 
config/app.php
'providers' => [
 ....
 Yajra\Datatables\DatatablesServiceProvider::class,
]
'aliases' => [
 ....
 'Datatables' => Yajra\Datatables\Facades\Datatables::class,
]
Define Use Datatable; in Controller and then define index function

 public function index(Request $request)
  {
      if ($request->ajax()) {
          $data = Todo::select('*');
          return Datatables::of($data)
                  ->addIndexColumn()
                  ->addColumn('action', function($row){
   
                         $btn = '<a href="javascript:void(0)" class="edit btn btn-primary btn-sm">View</a>';
     
                          return $btn;
                  })
                  ->rawColumns(['action'])
                  ->make(true);
      }
      
      return view('todo.index');
  }
  In view define this
  <script type="text/javascript">
  $(function () {
    
    var table = $('.data-table').DataTable({
        processing: true,
        serverSide: true,
        ajax: "{{ route('tasks') }}",
        columns: [
            {data: 'id', name: 'id'},
            {data: 'name', name: 'name'},
            {data: 'action', name: 'action', orderable: false, searchable: false},
        ]
    });
    
  });